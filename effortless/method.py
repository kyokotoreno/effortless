from .config import getConfig
from .argument import Argument

class Method:
    template = """{t}{accessor} {return_type} {name}({arguments}) {{
{body}{t}}}
"""

    def __init__(self, method):
        self.accessor = getConfig(method, 'accessor')
        self.return_type = getConfig(method, 'return_type')
        self.name = getConfig(method, 'name')
        self.arguments = Argument.fromArguments(getConfig(method, 'arguments'))
        self.body = getConfig(method, 'body')

    def fromMethods(methods):
        objs = []

        if methods:
            for method in methods:
                objs.append(Method(method))

        return objs

    def genArguments(self):
        self.gen_arguments = ''

        if self.arguments:
            self.gen_arguments = ''
            for argument in self.arguments:
                if not self.gen_arguments == '':
                    self.gen_arguments = ','.join([self.gen_arguments, argument.generate()])
                else:
                    self.gen_arguments = argument.generate()

    def genBody(self, t):
        self.gen_body = None

        if self.body:
            self.gen_body = ''
            for line in self.body.split('\n'):
                if not line.endswith(';'):
                    line += ';'

                self.gen_body += f'{t}    {line}\n'

    def generate(self, t):
        if not self.return_type:
            self.return_type = 'void'
        if not self.body:
            self.body = 'throw new java.lang.UnsupportedOperationException("Autogenerated Method!");'

        self.genArguments()
        self.genBody(t)

        return self.template.format(t=t, accessor=self.accessor, return_type=self.return_type, name=self.name, arguments=self.gen_arguments, body=self.gen_body)
